commit 4e6ca52570f2083aaeee9060bf675675f102c449
Author: Isaac <ysu83@myseneca.ca>
Date:   Mon Apr 8 01:18:34 2024 -0400

    v2

diff --git a/fundamentals.c b/fundamentals.c
index d4eb00a..7d3f52f 100644
--- a/fundamentals.c
+++ b/fundamentals.c
@@ -8,48 +8,28 @@
 // Include the header file
 #include "fundamentals.h"
 
+// V2
 // Function to demonstrate indexing strings
 void fundamentals (void) {
-
-// V1
 // Print a message indicating the start of the demo
-printf("*** Start of Indexing Strings Demo ***\n");
+printf("*** Start of  Strings Demo ***\n");
 // Declare variables
-char buffer1[BUFFER_SIZE];
-char numInput[NUM_INPUT_SIZE];
-size_t position;
+char buffer2[BUFFER_SIZE];
 // Loop until the user decides to quit
 do {
     // Prompt the user to type a non-empty string or 'q' to quit
-    printf ("Type not empty string (q - to quit):\n");
+    printf ("Type a string (q - to quit):\n");
     // Read input string from the user
-    fgets (buffer1, BUFFER_SIZE, stdin);
+    fgets (buffer2, BUFFER_SIZE, stdin);
     // Remove the newline character from the input string
-    buffer1[strlen(buffer1) - 1] = '\0';
+    buffer2[strlen(buffer2) - 1] = '\0';
     // Check if the input string is not 'q'
-    if (strcmp(buffer1, "q") != 0) {
-        // Prompt the user to type the character position within the string
-        printf ("Type the character position within the string:\n");
-        // Read input numerical value from the user
-        fgets(numInput, NUM_INPUT_SIZE, stdin);
-        // Remove the newline character from the input numerical value
-        numInput[strlen(numInput) - 1] = '\0';
-        // Convert the input numerical value to an integer
-        position = atoi(numInput);
-        // Check if the position is greater than or equal to the length of the string
-        if (position >= strlen(buffer1)) {
-            // Adjust position to the maximum available position in the string
-            position = strlen (buffer1) - 1;
-            printf ("Too big... Position reduced to max. available\n");
-        }
+    if (strcmp(buffer2, "q") != 0)
         // Print the character found at the specified position within the string
-        printf ("The character found at %d position is \'%c\'\n",
-                        (int)position, buffer1[position]);
-        
-    }
+        printf ("The length of is \'%s\' is %d characters\n", buffer2, (int)strlen(buffer2));
 // Continue looping until the user inputs 'q'
-} while (strcmp(buffer1, "q") != 0);
+} while (strcmp(buffer2, "q") != 0);
 // Print a message indicating the end of the demo
-printf("*** End of Indexing Strings Demo ***\n\n");
+printf("*** End of Measuring Strings Demo ***\n\n");
 
 }

commit 2e0c47e2d9121d4ffae4094b57dd366d65580a9d
Author: Isaac <ysu83@myseneca.ca>
Date:   Mon Apr 8 01:16:45 2024 -0400

    v1

diff --git a/fundamentals.c b/fundamentals.c
index 7d3f52f..d4eb00a 100644
--- a/fundamentals.c
+++ b/fundamentals.c
@@ -8,28 +8,48 @@
 // Include the header file
 #include "fundamentals.h"
 
-// V2
 // Function to demonstrate indexing strings
 void fundamentals (void) {
+
+// V1
 // Print a message indicating the start of the demo
-printf("*** Start of  Strings Demo ***\n");
+printf("*** Start of Indexing Strings Demo ***\n");
 // Declare variables
-char buffer2[BUFFER_SIZE];
+char buffer1[BUFFER_SIZE];
+char numInput[NUM_INPUT_SIZE];
+size_t position;
 // Loop until the user decides to quit
 do {
     // Prompt the user to type a non-empty string or 'q' to quit
-    printf ("Type a string (q - to quit):\n");
+    printf ("Type not empty string (q - to quit):\n");
     // Read input string from the user
-    fgets (buffer2, BUFFER_SIZE, stdin);
+    fgets (buffer1, BUFFER_SIZE, stdin);
     // Remove the newline character from the input string
-    buffer2[strlen(buffer2) - 1] = '\0';
+    buffer1[strlen(buffer1) - 1] = '\0';
     // Check if the input string is not 'q'
-    if (strcmp(buffer2, "q") != 0)
+    if (strcmp(buffer1, "q") != 0) {
+        // Prompt the user to type the character position within the string
+        printf ("Type the character position within the string:\n");
+        // Read input numerical value from the user
+        fgets(numInput, NUM_INPUT_SIZE, stdin);
+        // Remove the newline character from the input numerical value
+        numInput[strlen(numInput) - 1] = '\0';
+        // Convert the input numerical value to an integer
+        position = atoi(numInput);
+        // Check if the position is greater than or equal to the length of the string
+        if (position >= strlen(buffer1)) {
+            // Adjust position to the maximum available position in the string
+            position = strlen (buffer1) - 1;
+            printf ("Too big... Position reduced to max. available\n");
+        }
         // Print the character found at the specified position within the string
-        printf ("The length of is \'%s\' is %d characters\n", buffer2, (int)strlen(buffer2));
+        printf ("The character found at %d position is \'%c\'\n",
+                        (int)position, buffer1[position]);
+        
+    }
 // Continue looping until the user inputs 'q'
-} while (strcmp(buffer2, "q") != 0);
+} while (strcmp(buffer1, "q") != 0);
 // Print a message indicating the end of the demo
-printf("*** End of Measuring Strings Demo ***\n\n");
+printf("*** End of Indexing Strings Demo ***\n\n");
 
 }

commit d8c96f8e1f98e8a8bd691ab589cab9e6cf267ca1
Author: Isaac <ysu83@myseneca.ca>
Date:   Mon Apr 8 01:11:42 2024 -0400

    v2

diff --git a/fundamentals.c b/fundamentals.c
index d4eb00a..7d3f52f 100644
--- a/fundamentals.c
+++ b/fundamentals.c
@@ -8,48 +8,28 @@
 // Include the header file
 #include "fundamentals.h"
 
+// V2
 // Function to demonstrate indexing strings
 void fundamentals (void) {
-
-// V1
 // Print a message indicating the start of the demo
-printf("*** Start of Indexing Strings Demo ***\n");
+printf("*** Start of  Strings Demo ***\n");
 // Declare variables
-char buffer1[BUFFER_SIZE];
-char numInput[NUM_INPUT_SIZE];
-size_t position;
+char buffer2[BUFFER_SIZE];
 // Loop until the user decides to quit
 do {
     // Prompt the user to type a non-empty string or 'q' to quit
-    printf ("Type not empty string (q - to quit):\n");
+    printf ("Type a string (q - to quit):\n");
     // Read input string from the user
-    fgets (buffer1, BUFFER_SIZE, stdin);
+    fgets (buffer2, BUFFER_SIZE, stdin);
     // Remove the newline character from the input string
-    buffer1[strlen(buffer1) - 1] = '\0';
+    buffer2[strlen(buffer2) - 1] = '\0';
     // Check if the input string is not 'q'
-    if (strcmp(buffer1, "q") != 0) {
-        // Prompt the user to type the character position within the string
-        printf ("Type the character position within the string:\n");
-        // Read input numerical value from the user
-        fgets(numInput, NUM_INPUT_SIZE, stdin);
-        // Remove the newline character from the input numerical value
-        numInput[strlen(numInput) - 1] = '\0';
-        // Convert the input numerical value to an integer
-        position = atoi(numInput);
-        // Check if the position is greater than or equal to the length of the string
-        if (position >= strlen(buffer1)) {
-            // Adjust position to the maximum available position in the string
-            position = strlen (buffer1) - 1;
-            printf ("Too big... Position reduced to max. available\n");
-        }
+    if (strcmp(buffer2, "q") != 0)
         // Print the character found at the specified position within the string
-        printf ("The character found at %d position is \'%c\'\n",
-                        (int)position, buffer1[position]);
-        
-    }
+        printf ("The length of is \'%s\' is %d characters\n", buffer2, (int)strlen(buffer2));
 // Continue looping until the user inputs 'q'
-} while (strcmp(buffer1, "q") != 0);
+} while (strcmp(buffer2, "q") != 0);
 // Print a message indicating the end of the demo
-printf("*** End of Indexing Strings Demo ***\n\n");
+printf("*** End of Measuring Strings Demo ***\n\n");
 
 }

commit 654d7c8889ab1b1384375826285f26eebc88777b
Author: Isaac <ysu83@myseneca.ca>
Date:   Mon Apr 8 01:11:07 2024 -0400

    v1

diff --git a/fundamentals.c b/fundamentals.c
index 7d3f52f..d4eb00a 100644
--- a/fundamentals.c
+++ b/fundamentals.c
@@ -8,28 +8,48 @@
 // Include the header file
 #include "fundamentals.h"
 
-// V2
 // Function to demonstrate indexing strings
 void fundamentals (void) {
+
+// V1
 // Print a message indicating the start of the demo
-printf("*** Start of  Strings Demo ***\n");
+printf("*** Start of Indexing Strings Demo ***\n");
 // Declare variables
-char buffer2[BUFFER_SIZE];
+char buffer1[BUFFER_SIZE];
+char numInput[NUM_INPUT_SIZE];
+size_t position;
 // Loop until the user decides to quit
 do {
     // Prompt the user to type a non-empty string or 'q' to quit
-    printf ("Type a string (q - to quit):\n");
+    printf ("Type not empty string (q - to quit):\n");
     // Read input string from the user
-    fgets (buffer2, BUFFER_SIZE, stdin);
+    fgets (buffer1, BUFFER_SIZE, stdin);
     // Remove the newline character from the input string
-    buffer2[strlen(buffer2) - 1] = '\0';
+    buffer1[strlen(buffer1) - 1] = '\0';
     // Check if the input string is not 'q'
-    if (strcmp(buffer2, "q") != 0)
+    if (strcmp(buffer1, "q") != 0) {
+        // Prompt the user to type the character position within the string
+        printf ("Type the character position within the string:\n");
+        // Read input numerical value from the user
+        fgets(numInput, NUM_INPUT_SIZE, stdin);
+        // Remove the newline character from the input numerical value
+        numInput[strlen(numInput) - 1] = '\0';
+        // Convert the input numerical value to an integer
+        position = atoi(numInput);
+        // Check if the position is greater than or equal to the length of the string
+        if (position >= strlen(buffer1)) {
+            // Adjust position to the maximum available position in the string
+            position = strlen (buffer1) - 1;
+            printf ("Too big... Position reduced to max. available\n");
+        }
         // Print the character found at the specified position within the string
-        printf ("The length of is \'%s\' is %d characters\n", buffer2, (int)strlen(buffer2));
+        printf ("The character found at %d position is \'%c\'\n",
+                        (int)position, buffer1[position]);
+        
+    }
 // Continue looping until the user inputs 'q'
-} while (strcmp(buffer2, "q") != 0);
+} while (strcmp(buffer1, "q") != 0);
 // Print a message indicating the end of the demo
-printf("*** End of Measuring Strings Demo ***\n\n");
+printf("*** End of Indexing Strings Demo ***\n\n");
 
 }

commit 13818629b51fdc373a9c82b0c8586ccd64f56e0f
Author: Isaac <ysu83@myseneca.ca>
Date:   Mon Apr 8 00:57:28 2024 -0400

    v2

diff --git a/fundamentals.c b/fundamentals.c
index d4eb00a..7d3f52f 100644
--- a/fundamentals.c
+++ b/fundamentals.c
@@ -8,48 +8,28 @@
 // Include the header file
 #include "fundamentals.h"
 
+// V2
 // Function to demonstrate indexing strings
 void fundamentals (void) {
-
-// V1
 // Print a message indicating the start of the demo
-printf("*** Start of Indexing Strings Demo ***\n");
+printf("*** Start of  Strings Demo ***\n");
 // Declare variables
-char buffer1[BUFFER_SIZE];
-char numInput[NUM_INPUT_SIZE];
-size_t position;
+char buffer2[BUFFER_SIZE];
 // Loop until the user decides to quit
 do {
     // Prompt the user to type a non-empty string or 'q' to quit
-    printf ("Type not empty string (q - to quit):\n");
+    printf ("Type a string (q - to quit):\n");
     // Read input string from the user
-    fgets (buffer1, BUFFER_SIZE, stdin);
+    fgets (buffer2, BUFFER_SIZE, stdin);
     // Remove the newline character from the input string
-    buffer1[strlen(buffer1) - 1] = '\0';
+    buffer2[strlen(buffer2) - 1] = '\0';
     // Check if the input string is not 'q'
-    if (strcmp(buffer1, "q") != 0) {
-        // Prompt the user to type the character position within the string
-        printf ("Type the character position within the string:\n");
-        // Read input numerical value from the user
-        fgets(numInput, NUM_INPUT_SIZE, stdin);
-        // Remove the newline character from the input numerical value
-        numInput[strlen(numInput) - 1] = '\0';
-        // Convert the input numerical value to an integer
-        position = atoi(numInput);
-        // Check if the position is greater than or equal to the length of the string
-        if (position >= strlen(buffer1)) {
-            // Adjust position to the maximum available position in the string
-            position = strlen (buffer1) - 1;
-            printf ("Too big... Position reduced to max. available\n");
-        }
+    if (strcmp(buffer2, "q") != 0)
         // Print the character found at the specified position within the string
-        printf ("The character found at %d position is \'%c\'\n",
-                        (int)position, buffer1[position]);
-        
-    }
+        printf ("The length of is \'%s\' is %d characters\n", buffer2, (int)strlen(buffer2));
 // Continue looping until the user inputs 'q'
-} while (strcmp(buffer1, "q") != 0);
+} while (strcmp(buffer2, "q") != 0);
 // Print a message indicating the end of the demo
-printf("*** End of Indexing Strings Demo ***\n\n");
+printf("*** End of Measuring Strings Demo ***\n\n");
 
 }

commit e399a28e4c97a27de2a85aa1f8cb3759d2b23bea
Author: Isaac <ysu83@myseneca.ca>
Date:   Mon Apr 8 00:55:00 2024 -0400

    v1

diff --git a/converting.c b/converting.c
new file mode 100644
index 0000000..49ee792
--- /dev/null
+++ b/converting.c
@@ -0,0 +1,23 @@
+// CONVERTING MODULE SOURCE
+#define _CRT_SECURE_NO_WARNINGS
+#define BUFFER_SIZE 80
+#include "converting.h"
+
+// V1
+void converting (void) {
+    printf ("*** Start of Converting Strings to int Demo ***\n");
+    char intString[BUFFER_SIZE];
+    int intNumber;
+    do {
+        printf ("Type an int numeric string (q - to quit):\n");
+        fgets(intString, BUFFER_SIZE, stdin);
+        intString [strlen(intString) - 1] = '\0';
+        // Continue looping until the user inputs 'q'
+        if (strcmp(intString, "q") != 0) {
+            intNumber = atoi(intString);
+            printf ("Converted number is %d\n", intNumber);
+        }
+} while (strcmp(intString, "q") != 0);
+printf("*** End of Converting Strings to int Demo ***\n\n");
+
+}
diff --git a/converting.h b/converting.h
new file mode 100644
index 0000000..31848d2
--- /dev/null
+++ b/converting.h
@@ -0,0 +1,8 @@
+// CONVERTING MODULE HEADER
+#ifndef _CONVERTING_H_
+#define _CONVERTING_H_
+#include <stdio.h>
+#include <string.h> 
+#include <stdlib.h>
+void converting (void);
+#endif
\ No newline at end of file
diff --git a/fundamentals.c b/fundamentals.c
new file mode 100644
index 0000000..d4eb00a
--- /dev/null
+++ b/fundamentals.c
@@ -0,0 +1,55 @@
+// FUNDAMENTALS MODULE SOURCE
+// Preprocessor directive to suppress warnings related to certain functions
+#define CRT_SECURE_NO_WARNINGS
+// Define the buffer size for input strings
+#define BUFFER_SIZE 80
+// Define the size for input of numerical values
+#define NUM_INPUT_SIZE 10
+// Include the header file
+#include "fundamentals.h"
+
+// Function to demonstrate indexing strings
+void fundamentals (void) {
+
+// V1
+// Print a message indicating the start of the demo
+printf("*** Start of Indexing Strings Demo ***\n");
+// Declare variables
+char buffer1[BUFFER_SIZE];
+char numInput[NUM_INPUT_SIZE];
+size_t position;
+// Loop until the user decides to quit
+do {
+    // Prompt the user to type a non-empty string or 'q' to quit
+    printf ("Type not empty string (q - to quit):\n");
+    // Read input string from the user
+    fgets (buffer1, BUFFER_SIZE, stdin);
+    // Remove the newline character from the input string
+    buffer1[strlen(buffer1) - 1] = '\0';
+    // Check if the input string is not 'q'
+    if (strcmp(buffer1, "q") != 0) {
+        // Prompt the user to type the character position within the string
+        printf ("Type the character position within the string:\n");
+        // Read input numerical value from the user
+        fgets(numInput, NUM_INPUT_SIZE, stdin);
+        // Remove the newline character from the input numerical value
+        numInput[strlen(numInput) - 1] = '\0';
+        // Convert the input numerical value to an integer
+        position = atoi(numInput);
+        // Check if the position is greater than or equal to the length of the string
+        if (position >= strlen(buffer1)) {
+            // Adjust position to the maximum available position in the string
+            position = strlen (buffer1) - 1;
+            printf ("Too big... Position reduced to max. available\n");
+        }
+        // Print the character found at the specified position within the string
+        printf ("The character found at %d position is \'%c\'\n",
+                        (int)position, buffer1[position]);
+        
+    }
+// Continue looping until the user inputs 'q'
+} while (strcmp(buffer1, "q") != 0);
+// Print a message indicating the end of the demo
+printf("*** End of Indexing Strings Demo ***\n\n");
+
+}
diff --git a/fundamentals.h b/fundamentals.h
new file mode 100644
index 0000000..5f8bf4f
--- /dev/null
+++ b/fundamentals.h
@@ -0,0 +1,13 @@
+// FUNDAMENTALS MODULE HEADER
+
+#ifndef _FUNDAMENTALS_H_ // Header guard to prevent multiple inclusions
+#define _FUNDAMENTALS_H_
+
+#include <stdio.h>   // Include standard I/O functions
+#include <stdlib.h>  // Include standard library functions
+#include <string.h>  // Include string manipulation functions
+
+// Function declaration for the fundamentals function
+void fundamentals(void);
+
+#endif // End of header guard
diff --git a/main.c b/main.c
new file mode 100644
index 0000000..cb7f786
--- /dev/null
+++ b/main.c
@@ -0,0 +1,34 @@
+#define _CRT_SECURE_NO_WARNINGS 
+#include "fundamentals.h"
+#include "manipulating.h"
+#include "converting.h"
+#include "tokenizing.h"
+
+int main (void)
+{
+    char buff[10];
+    do
+    {   
+        printf("1 - Fundamentals\n"); 
+        printf("2 - Manipulation\n"); 
+        printf("3 - Converting\n"); 
+        printf("4 - Tokenizing\n"); 
+        printf("0 - Exit\n");
+        printf("Which module to run? \n"); 
+        fgets(buff, 10, stdin);
+        switch (buff[0])
+        {
+        case '1': fundamentals ();
+            break;
+        case '2': manipulating ();
+            break;
+        case '3': converting();
+            break;
+        case '4': tokenizing();
+            break;
+        }
+        
+    } while (buff[0] != '0'); 
+return 0;
+
+}
diff --git a/manipulating.c b/manipulating.c
new file mode 100644
index 0000000..fd07a71
--- /dev/null
+++ b/manipulating.c
@@ -0,0 +1,25 @@
+// MANIPULATING SOURCE
+#define CRT_SECURE_NO_WARNINGS
+#define BUFFER_SIZE 80
+#include "manipulating.h"
+
+// V1
+void manipulating (void) {
+    printf("*** Start of Concatenating Strings Demo ***\n");
+    char string1[BUFFER_SIZE];
+    char string2[BUFFER_SIZE];
+do {
+    printf ("Type the 1st string (q - to quit): \n"); 
+    fgets (string1, BUFFER_SIZE, stdin);
+    string1[strlen(string1) - 1] = '\0';
+    if ((strcmp(string1, "q") != 0)) {
+        printf ("Type the 2nd string: \n"); 
+        fgets (string2, BUFFER_SIZE, stdin);
+        string2 [strlen(string2) - 1] = '\0';
+        strcat(string1, string2);
+        printf ("Concatenated string is \'%s\'\n", string1) ;
+    }
+} while (strcmp(string1, "q") != 0);
+printf("*** End of Concatenating strings Demo ***\n\n");
+
+}
\ No newline at end of file
diff --git a/manipulating.h b/manipulating.h
new file mode 100644
index 0000000..4c7ab15
--- /dev/null
+++ b/manipulating.h
@@ -0,0 +1,7 @@
+// MANIPULATING MODULE HEADER
+#ifndef _MANIPULATING_H_
+#define _MANIPULATING_H_
+#include <stdio.h>
+#include <string.h> 
+void manipulating (void);
+#endif
\ No newline at end of file
diff --git a/tokenizing.c b/tokenizing.c
new file mode 100644
index 0000000..3223552
--- /dev/null
+++ b/tokenizing.c
@@ -0,0 +1,27 @@
+// TOKENIZING MODULE SOURCE
+#define _CRT_SECURE_ NO_WARNINGS
+#define BUFFER_SIZE 300
+#include "tokenizing.h"
+
+// V1
+void tokenizing (void) {
+    printf ("*** Start of Tokenizing Words Demo ***\n");
+    char words[BUFFER_SIZE];
+    char* nextWord = NULL;
+    int wordsCounter;
+    do {
+        printf ("Type a few words separated by space (q - to quit):\n"); 
+        fgets(words, BUFFER_SIZE, stdin);
+        words[strlen(words) - 1] = '\0';
+        if (strcmp(words, "q") != 0) {
+            nextWord = strtok(words, " ");
+            wordsCounter = 1;
+            while (nextWord) {
+                printf ("Word #%d is \'%s\'\n", wordsCounter++, nextWord);
+                nextWord = strtok(NULL, " ");
+            }
+        }
+} while (strcmp(words, "q") != 0);
+printf("*** End of rokenizing Words Demo ***\n\n");
+
+}
\ No newline at end of file
diff --git a/tokenizing.h b/tokenizing.h
new file mode 100644
index 0000000..0599f01
--- /dev/null
+++ b/tokenizing.h
@@ -0,0 +1,7 @@
+// TOKENIZING MODULE HEADER 
+#ifndef _TOKENIZING_H_
+#define _TOKENIZING_H_
+#include <stdio.h>
+#include <string.h> 
+void tokenizing (void);
+#endif
\ No newline at end of file
