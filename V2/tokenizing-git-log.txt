commit f40bb93cadbfc69086d475f6895471927b808391
Author: Lawrence Wong <yhwong12@myseneca.ca>
Date:   Tue Apr 9 17:48:44 2024 -0400

    v2

diff --git a/tokenizing.c b/tokenizing.c
index 015ec31..a23a605 100644
--- a/tokenizing.c
+++ b/tokenizing.c
@@ -1,28 +1,71 @@
 // TOKENIZING MODULE SOURCE
-#define _CRT_SECURE_ NO_WARNINGS
+// This line indicates that this file contains the implementation of a tokenizing module.
+
+#define _CRT_SECURE_NO_WARNINGS
+// This line is a preprocessor directive to define a macro "_CRT_SECURE_NO_WARNINGS" which suppresses warnings related to certain secure functions in the CRT (C Run-Time) library.
+
 #define BUFFER_SIZE 300
+// This line defines a macro BUFFER_SIZE with a value of 300, indicating the size of the buffer used to store words.
+
 #include "tokenizing.h"
+// This line includes the header file "tokenizing.h", which likely contains declarations or definitions needed for this implementation.
 
 // V1
-void tokenizing (void) { // start the Tokenizing module program
-    printf ("*** Start of Tokenizing Words Demo ***\n");
-    char words[BUFFER_SIZE]; //sets the array size of words variable acordly with buzzer size that is equal to 300
-    char* nextWord = NULL; // nextWord sends its input to null
-    int wordsCounter; // declaration of the variable wordsCounter
-    
+// This is likely a version marker or a comment indicating the start of version 1 of this code.
+
+void tokenizing(void) {
+// This line defines the function "tokenizing" which takes no arguments and returns void.
+
+    printf("*** Start of Tokenizing Words Demo ***\n");
+    // This line prints a message indicating the start of the tokenizing words demo.
+
+    char words[BUFFER_SIZE];
+    // This line declares an array named "words" of type char with size BUFFER_SIZE, used to store user input.
+
+    char* nextWord = NULL;
+    // This line declares a char pointer "nextWord" and initializes it to NULL.
+
+    int wordsCounter;
+    // This line declares an integer variable "wordsCounter" without initialization.
+
     do {
-        printf ("Type a few words separated by space (q - to quit):\n"); //message asking for a input
-        fgets(words, BUFFER_SIZE, stdin); // Read input from the user
-        words[strlen(words) - 1] = '\0'; 
+    // This line starts a do-while loop. It will execute at least once and will continue to execute as long as the condition in the while statement evaluates to true.
+
+        printf("Type a few words separated by space (q - to quit):\n");
+        // This line prints a message prompting the user to type words.
+
+        fgets(words, BUFFER_SIZE, stdin);
+        // This line reads input from the standard input (stdin) and stores it in the "words" array, up to a maximum of BUFFER_SIZE characters.
+
+        words[strlen(words) - 1] = '\0';
+        // This line removes the trailing newline character from the input string by replacing it with a null terminator, effectively trimming the newline character.
+
         if (strcmp(words, "q") != 0) {
+        // This line checks if the input string is not equal to "q".
+
             nextWord = strtok(words, " ");
+            // This line tokenizes the input string into words using space (" ") as the delimiter and assigns the pointer to the first token to "nextWord".
+
             wordsCounter = 1;
+            // This line initializes the wordsCounter to 1.
+
             while (nextWord) {
-                printf ("Word #%d is \'%s\'\n", wordsCounter++, nextWord); // the final ouput, seprated by words, and says to the user how much words are written
+            // This line starts a while loop which iterates as long as "nextWord" is not NULL.
+
+                printf("Word #%d is \'%s\'\n", wordsCounter++, nextWord);
+                // This line prints each tokenized word along with its count.
+
                 nextWord = strtok(NULL, " ");
+                // This line continues tokenizing the input string from where it left off, searching for subsequent tokens.
+
             }
         }
-} while (strcmp(words, "q") != 0); // condition to make the loop working, that means until the input be "q"
-printf("*** End of rokenizing Words Demo ***\n\n"); // message indicating the end of the module
 
-}
\ No newline at end of file
+    } while (strcmp(words, "q") != 0);
+    // This line checks if the input string is not equal to "q", if true, the loop continues; otherwise, it exits.
+
+    printf("*** End of Tokenizing Words Demo ***\n\n");
+    // This line prints a message indicating the end of the tokenizing words demo.
+
+}
+// This line marks the end of the "tokenizing" function.
\ No newline at end of file
diff --git a/tokenizing.h b/tokenizing.h
index 0599f01..cadd874 100644
--- a/tokenizing.h
+++ b/tokenizing.h
@@ -1,7 +1,23 @@
 // TOKENIZING MODULE HEADER 
+// This line is a comment indicating the purpose of the header file.
+
 #ifndef _TOKENIZING_H_
+// This line is a preprocessor directive that checks if the macro _TOKENIZING_H_ is not defined.
+// If it's not defined, the following code block will be included, preventing multiple inclusions of the same header file.
+
 #define _TOKENIZING_H_
+// This line defines the macro _TOKENIZING_H_ to prevent multiple inclusions of the header file.
+
 #include <stdio.h>
+// This line includes the standard input-output header file, which provides declarations for input and output functions.
+
 #include <string.h> 
-void tokenizing (void);
-#endif
\ No newline at end of file
+// This line includes the string header file, which provides various string manipulation functions and declarations.
+
+void tokenizing(void);
+// This line declares a function prototype for the function tokenizing().
+// The function takes no arguments and returns void.
+
+#endif
+// This line marks the end of the conditional compilation directive started by #ifndef.
+// It ensures that the contents of the header file are only included once in the compilation process.
\ No newline at end of file

commit bcdf3995d18b063aa89e62495ad6ef54b2b4bfd5
Author: Lawrence Wong <yhwong12@myseneca.ca>
Date:   Tue Apr 9 17:47:24 2024 -0400

    v1

diff --git a/tokenizing.c b/tokenizing.c
new file mode 100644
index 0000000..015ec31
--- /dev/null
+++ b/tokenizing.c
@@ -0,0 +1,28 @@
+// TOKENIZING MODULE SOURCE
+#define _CRT_SECURE_ NO_WARNINGS
+#define BUFFER_SIZE 300
+#include "tokenizing.h"
+
+// V1
+void tokenizing (void) { // start the Tokenizing module program
+    printf ("*** Start of Tokenizing Words Demo ***\n");
+    char words[BUFFER_SIZE]; //sets the array size of words variable acordly with buzzer size that is equal to 300
+    char* nextWord = NULL; // nextWord sends its input to null
+    int wordsCounter; // declaration of the variable wordsCounter
+    
+    do {
+        printf ("Type a few words separated by space (q - to quit):\n"); //message asking for a input
+        fgets(words, BUFFER_SIZE, stdin); // Read input from the user
+        words[strlen(words) - 1] = '\0'; 
+        if (strcmp(words, "q") != 0) {
+            nextWord = strtok(words, " ");
+            wordsCounter = 1;
+            while (nextWord) {
+                printf ("Word #%d is \'%s\'\n", wordsCounter++, nextWord); // the final ouput, seprated by words, and says to the user how much words are written
+                nextWord = strtok(NULL, " ");
+            }
+        }
+} while (strcmp(words, "q") != 0); // condition to make the loop working, that means until the input be "q"
+printf("*** End of rokenizing Words Demo ***\n\n"); // message indicating the end of the module
+
+}
\ No newline at end of file
diff --git a/tokenizing.h b/tokenizing.h
new file mode 100644
index 0000000..0599f01
--- /dev/null
+++ b/tokenizing.h
@@ -0,0 +1,7 @@
+// TOKENIZING MODULE HEADER 
+#ifndef _TOKENIZING_H_
+#define _TOKENIZING_H_
+#include <stdio.h>
+#include <string.h> 
+void tokenizing (void);
+#endif
\ No newline at end of file
